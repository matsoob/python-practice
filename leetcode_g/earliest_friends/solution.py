# https://leetcode.com/problems/the-earliest-moment-when-everyone-become-friends/

from typing import List


class Solution:
    def earliestAcq(self, logs: List[List[int]], n: int) -> int:
        logs.sort()
        all_unreached_people = set(range(n))
        starting_person = logs[0][1]
        all_unreached_people.remove(starting_person)
        all_unreached_people.remove(logs[0][2])
        relationships = dict()
        for log in logs:
            timestamp, person1, person2 = log
            if person1 in relationships:
                relationships[person1].add(person2)
            else:
                relationships[person1] = set([person2])
            if person2 in relationships:
                relationships[person2].add(person1)
            else:
                relationships[person2] = set([person1])
            for person in relationships[person2]:
                relationships[person1].add(person)
                relationships[person].add(person1)
            for person in relationships[person1]:
                relationships[person2].add(person)
                relationships[person].add(person2)

            if person1 not in all_unreached_people or person2 not in all_unreached_people:
                if person1 in all_unreached_people:
                    all_unreached_people.remove(person1)
                if person2 in all_unreached_people:
                    all_unreached_people.remove(person2)
                # remove all people acquaintable from them
                reached_people = list()
                reached_people.extend(relationships.get(person1, {}))
                reached_people.extend(relationships.get(person2, {}))
                for reached_person in reached_people:
                    if reached_person in all_unreached_people:
                        all_unreached_people.remove(reached_person)

            if not all_unreached_people:
                return timestamp
            
        return -1
    
if __name__ == '__main__':
    sol = Solution()
    # print(sol.earliestAcq([[20190101,0,1],[20190104,3,4],[20190107,2,3],[20190211,1,5],[20190224,2,4],[20190301,0,3],[20190312,1,2],[20190322,4,5]], 6))
    # print(sol.earliestAcq([[0,2,0],[1,0,1],[3,0,3],[4,1,2],[7,3,1]], 3))
    # print(sol.earliestAcq([[9,0,3],[0,2,7],[12,3,1],[5,5,2],[3,4,5],[1,5,0],[6,2,4],[2,5,3],[7,7,3]], 8))
        
    test_input = [[165,2,1],[600,6,13],[395,15,11],[10,39,9],[962,12,34],[238,9,0],[717,30,27],[189,10,11],[38,2,3],[497,8,21],[143,26,7],[228,12,8],[366,32,23],[850,35,18],[199,36,4],[529,15,10],[289,31,23],[97,10,7],[147,10,20],[259,6,20],[371,33,5],[747,8,33],[624,2,33],[621,36,22],[146,18,7],[653,1,33],[348,28,9],[190,17,28],[994,16,0],[184,35,14],[105,10,16],[269,22,6],[271,39,29],[448,4,24],[63,18,32],[575,13,8],[888,11,16],[303,2,25],[425,4,7],[373,1,28],[379,8,3],[106,27,4],[847,29,17],[536,5,23],[518,32,29],[216,38,6],[458,27,17],[823,4,5],[551,12,21],[889,25,23],[680,4,23],[437,13,27],[204,21,11],[566,36,12],[442,9,26],[637,30,22],[610,36,0],[177,3,4],[435,36,5],[648,30,24],[248,30,23],[79,27,28],[119,28,18],[438,15,22],[23,31,16],[647,30,3],[552,5,20],[508,20,17],[223,37,31],[40,13,4],[150,35,23],[15,22,19],[416,30,2],[333,7,5],[702,8,39],[674,14,39],[110,25,21],[885,13,20],[431,20,23],[330,33,38],[54,26,29],[125,28,14],[151,38,24],[256,31,21],[628,8,31],[320,28,30],[111,30,6],[398,3,16],[89,4,39],[141,36,14],[844,8,10],[266,24,25],[76,34,30],[90,9,5],[103,17,30],[559,36,10],[696,28,5],[154,22,16],[37,17,19],[483,21,37],[641,21,1],[432,15,30],[830,33,0],[827,3,38],[91,10,34],[332,20,7],[306,20,34],[821,2,18],[3,18,26],[586,37,14],[101,3,22],[726,13,32],[393,38,14],[315,2,20],[632,5,38],[178,35,15],[2,24,17],[534,31,36],[12,24,23],[645,29,1],[835,11,27],[441,16,18],[356,11,12],[205,34,7],[880,9,32],[749,20,27],[396,29,11],[58,32,28],[460,21,16],[574,22,10],[49,13,21],[350,9,21],[467,26,39],[31,15,27],[433,15,38],[629,14,0],[358,18,19],[42,10,31],[233,29,33],[218,33,37],[73,38,16],[257,12,10],[300,3,11],[667,24,31],[464,23,2],[355,1,3],[64,9,6],[299,30,29],[831,22,28],[21,7,3],[4,30,5],[901,16,1],[34,23,0],[634,31,15],[801,23,16],[682,5,32],[664,12,32],[846,13,24],[140,21,35],[96,24,10],[375,32,10],[762,26,8],[36,23,21],[461,20,9],[193,32,34],[274,38,22],[862,21,15],[822,14,10],[100,31,19],[439,27,5],[385,1,5],[701,18,13],[455,12,9],[68,15,25],[113,12,1],[603,39,2],[766,29,0],[741,14,11],[230,36,6],[690,21,0],[384,33,22],[479,39,36],[293,31,30],[86,30,14],[99,38,39],[28,12,39],[429,36,2],[161,15,32],[290,15,18],[323,1,7],[743,0,5],[706,26,24],[577,12,20],[361,10,6],[13,12,23],[197,0,4],[263,7,0],[794,39,34],[207,37,11],[5,37,38],[312,27,31],[301,20,37],[495,7,32],[117,2,34],[413,25,26],[159,28,36],[109,23,22],[17,23,26],[51,14,6],[334,15,33],[775,38,31],[779,26,35],[733,23,8],[394,27,1],[322,35,19],[861,20,38],[471,0,17],[897,21,17],[421,38,10],[265,5,12],[488,21,19],[142,10,9],[683,2,35],[399,19,7],[252,23,1],[470,2,22],[826,5,31],[128,39,13],[35,20,29],[138,14,2],[282,29,36],[735,14,13],[619,11,17],[812,34,35],[11,33,28],[39,5,26],[62,18,10],[297,13,15],[625,3,34],[564,17,13],[565,29,18],[932,36,19],[868,8,16],[133,5,39],[718,4,17],[999,29,38],[449,7,27],[890,26,19],[397,6,12],[913,19,37],[60,20,21],[71,25,12],[46,24,5],[453,37,7],[636,23,7],[200,6,26],[434,6,19],[77,35,9],[661,36,21],[639,13,5],[210,37,29],[748,32,21],[382,9,34],[66,38,26],[336,36,35],[221,34,33],[507,28,24],[0,27,37],[102,30,21],[612,18,1],[172,23,39],[388,17,9],[849,6,1],[473,26,20],[589,31,13],[563,20,31],[33,8,25],[545,33,11],[509,4,30],[587,35,4],[839,22,32],[347,22,5],[16,8,11],[523,23,28],[427,4,33],[236,12,29],[370,35,25],[132,0,25],[392,26,32],[45,24,21],[490,39,32],[129,8,35],[94,35,11],[344,0,3],[123,2,32],[418,22,29],[407,9,11],[387,39,15],[298,3,25],[444,30,10],[59,26,33],[47,24,32],[245,18,0],[546,30,36],[24,13,30],[50,37,6],[74,3,12],[92,6,32],[340,6,4],[698,18,3],[745,14,23],[584,26,31],[52,4,28],[213,27,12],[307,4,38],[430,29,6],[893,33,6],[728,12,33],[270,22,12],[724,27,0],[517,29,15],[120,16,27],[602,7,6],[677,27,10],[163,22,21],[924,17,23],[287,2,8],[530,23,3],[53,3,26],[75,15,6],[180,34,1],[459,34,25],[112,39,0],[982,33,23],[30,33,13],[596,16,17],[493,18,17],[556,8,29],[195,37,3],[484,20,36],[215,38,21],[531,38,25],[8,10,29],[139,18,5],[134,29,31],[729,38,32],[659,35,22],[222,3,29],[934,37,17],[131,15,8],[800,21,3],[196,20,14],[144,33,20],[82,16,28],[746,11,34],[7,19,9],[278,8,32],[317,10,3],[516,31,17],[730,13,0],[391,16,6],[183,12,38],[940,32,4],[712,28,38],[27,38,34],[313,24,16],[737,28,3],[70,31,11],[618,5,11],[296,22,25],[768,13,22],[615,2,37],[955,37,39],[469,6,24],[181,37,1],[18,22,1],[783,28,29],[446,28,31],[121,9,18],[349,28,2],[209,6,11],[739,35,7],[981,25,33],[169,15,5],[510,24,14],[304,28,37],[949,1,35],[93,29,34],[249,36,7],[81,0,15],[808,27,26],[854,19,15],[472,10,39],[127,26,36],[342,36,24],[192,27,3],[638,26,1],[126,8,27],[267,13,25],[843,3,13],[276,39,3],[957,16,13],[171,11,18],[722,0,19],[291,27,34],[273,16,5],[926,39,17],[941,32,3],[44,1,38],[214,36,13],[176,14,18],[440,23,37],[186,36,25],[85,5,3],[585,20,32],[95,28,20],[939,1,0],[152,9,23],[188,3,17],[875,21,7],[620,31,18],[22,13,19],[108,14,33],[319,17,10],[308,38,0],[993,12,19],[65,31,0],[268,21,2],[465,3,9],[761,9,14],[20,28,26],[324,0,34],[454,21,18],[881,4,26],[684,24,20],[569,6,17],[527,35,37],[56,29,5],[909,34,31],[302,17,25],[590,17,22],[998,23,13],[78,8,14],[229,18,38],[14,23,36],[48,24,35],[26,38,17],[286,39,33],[328,22,26],[167,13,26],[157,12,26],[175,16,7],[9,3,33],[402,10,5],[173,7,30],[678,4,25],[295,31,14],[541,34,24],[280,9,27],[781,28,15],[376,4,8],[155,39,30],[549,8,20],[422,30,16],[995,35,27],[858,22,0],[61,19,34],[6,5,25],[489,2,17],[240,28,35],[357,23,18],[104,11,13],[118,35,5],[970,33,10],[107,14,32],[242,37,12],[410,25,14],[57,10,35],[25,19,2],[673,35,13],[784,1,20],[978,16,25],[1,31,6],[652,4,18],[98,12,16],[406,9,25],[203,4,1],[114,4,10],[325,31,4],[149,31,35],[635,15,36],[329,33,18],[837,7,15],[335,0,26],[466,10,23],[255,31,1],[251,26,16],[337,19,14],[499,14,27],[502,16,32],[414,18,12],[43,35,17],[250,4,16],[806,32,36],[750,3,36],[145,1,17],[579,15,37],[166,1,39],[408,5,6],[208,14,26],[390,9,8],[626,24,0],[283,27,24],[486,2,11],[374,28,21],[29,30,26],[185,36,38],[67,25,6],[41,28,7],[239,37,32],[201,17,33],[571,24,8],[234,15,17],[780,27,36],[789,11,24],[838,27,29],[69,0,6],[562,1,11],[281,11,22],[19,11,30],[606,8,1],[359,28,25],[633,15,9],[352,34,13],[72,6,21],[122,34,23],[539,34,16],[32,34,6],[211,26,2],[403,30,20],[662,6,18],[331,26,21],[224,37,9],[412,22,31],[156,23,19],[237,25,18],[182,27,21],[316,29,14],[83,34,15],[158,29,7],[756,35,32],[902,19,25],[538,17,14],[326,16,2],[420,13,9],[445,0,37],[520,1,10],[84,17,26],[482,23,27],[853,13,10],[487,28,19],[55,25,1],[594,28,13]]
    n = 40

    print(sol.earliestAcq(test_input, n)) # expect 51